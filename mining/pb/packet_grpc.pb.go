// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: packet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CandidateStream_Open_FullMethodName             = "/proto.CandidateStream/Open"
	CandidateStream_SubmitValidBlock_FullMethodName = "/proto.CandidateStream/SubmitValidBlock"
	CandidateStream_Generate_FullMethodName         = "/proto.CandidateStream/Generate"
)

// CandidateStreamClient is the client API for CandidateStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandidateStreamClient interface {
	Open(ctx context.Context, in *CandidateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandidateBlock], error)
	SubmitValidBlock(ctx context.Context, in *ValidBlock, opts ...grpc.CallOption) (*AckBlockSubmited, error)
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type candidateStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidateStreamClient(cc grpc.ClientConnInterface) CandidateStreamClient {
	return &candidateStreamClient{cc}
}

func (c *candidateStreamClient) Open(ctx context.Context, in *CandidateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandidateBlock], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CandidateStream_ServiceDesc.Streams[0], CandidateStream_Open_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CandidateRequest, CandidateBlock]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandidateStream_OpenClient = grpc.ServerStreamingClient[CandidateBlock]

func (c *candidateStreamClient) SubmitValidBlock(ctx context.Context, in *ValidBlock, opts ...grpc.CallOption) (*AckBlockSubmited, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckBlockSubmited)
	err := c.cc.Invoke(ctx, CandidateStream_SubmitValidBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateStreamClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, CandidateStream_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidateStreamServer is the server API for CandidateStream service.
// All implementations must embed UnimplementedCandidateStreamServer
// for forward compatibility.
type CandidateStreamServer interface {
	Open(*CandidateRequest, grpc.ServerStreamingServer[CandidateBlock]) error
	SubmitValidBlock(context.Context, *ValidBlock) (*AckBlockSubmited, error)
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedCandidateStreamServer()
}

// UnimplementedCandidateStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCandidateStreamServer struct{}

func (UnimplementedCandidateStreamServer) Open(*CandidateRequest, grpc.ServerStreamingServer[CandidateBlock]) error {
	return status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedCandidateStreamServer) SubmitValidBlock(context.Context, *ValidBlock) (*AckBlockSubmited, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitValidBlock not implemented")
}
func (UnimplementedCandidateStreamServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedCandidateStreamServer) mustEmbedUnimplementedCandidateStreamServer() {}
func (UnimplementedCandidateStreamServer) testEmbeddedByValue()                         {}

// UnsafeCandidateStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidateStreamServer will
// result in compilation errors.
type UnsafeCandidateStreamServer interface {
	mustEmbedUnimplementedCandidateStreamServer()
}

func RegisterCandidateStreamServer(s grpc.ServiceRegistrar, srv CandidateStreamServer) {
	// If the following call pancis, it indicates UnimplementedCandidateStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CandidateStream_ServiceDesc, srv)
}

func _CandidateStream_Open_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandidateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandidateStreamServer).Open(m, &grpc.GenericServerStream[CandidateRequest, CandidateBlock]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandidateStream_OpenServer = grpc.ServerStreamingServer[CandidateBlock]

func _CandidateStream_SubmitValidBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateStreamServer).SubmitValidBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateStream_SubmitValidBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateStreamServer).SubmitValidBlock(ctx, req.(*ValidBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateStream_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateStreamServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateStream_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateStreamServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidateStream_ServiceDesc is the grpc.ServiceDesc for CandidateStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidateStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CandidateStream",
	HandlerType: (*CandidateStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitValidBlock",
			Handler:    _CandidateStream_SubmitValidBlock_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _CandidateStream_Generate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Open",
			Handler:       _CandidateStream_Open_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packet.proto",
}

const (
	Health_Check_FullMethodName = "/proto.Health/Check"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Health_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility.
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServer struct{}

func (UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}
func (UnimplementedHealthServer) testEmbeddedByValue()                {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	// If the following call pancis, it indicates UnimplementedHealthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packet.proto",
}
